package com.prateekbisht.gaming;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.awt.font.*;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.Timer;

import com.prateekbisht.gaming.sprites.Enemy;
import com.prateekbisht.gaming.sprites.Player;

public class Board extends JPanel {
	
	Timer timer;
	
	BufferedImage backgroundImage;
	
	Player player;
	Enemy enemies[] = new Enemy[3];
	
	public Board() {
		setSize(1400,800);
		loadBackgroundImage();
		player = new Player();
		loadEnemies();
		gameLoop();
		setFocusable(true);
		bindEvents();
		 
	}
	
	private void gameOver(Graphics pen) {
		for(Enemy enemy : enemies) {
			if(isCollide(enemy)) {
				pen.setFont(new Font("times", Font.BOLD, 30));
				pen.setColor(Color.RED);
				pen.drawString("Game Over", 1400/2, 800/2);
			}
		}
	}
	
	private boolean isCollide(Enemy enemy) {
		int xDistance = Math.abs(player.getX() - enemy.getX());
		int yDistance = Math.abs(player.getY() - enemy.getY());
		
		int maxH = Math.max(player.getH(), enemy.getH());
		int maxW = Math.max(player.getW(), enemy.getW());
		
		return xDistance <= maxW && yDistance <= maxH;
		
	}
	
	private void bindEvents() {
		addKeyListener(new KeyListener() {
			
			@Override
			public void keyTyped(KeyEvent e) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void keyReleased(KeyEvent e) {
				player.setSpeed(0);
				
			}
			
			@Override
			public void keyPressed(KeyEvent e) {
				if(e.getKeyCode() == KeyEvent.VK_RIGHT) {					
					player.setSpeed(10);
				}else if(e.getKeyCode() == KeyEvent.VK_LEFT) {
					player.setSpeed(-10);
				}
				
			}
		});
	}
	
	private void loadEnemies() {
		int x = 500;
		int speed = 7;
		for(int i=0; i<enemies.length; i++) {
			enemies[i] = new Enemy(x + (i*400), speed + (i*7)); 
		}
	}
	
	private void gameLoop() {
		timer = new Timer(50, (e)->repaint());
		timer.start();
	}
	
	private void drawPlayer(Graphics pen) {
		player.draw(pen);
		player.move();
	}
	
	private void drawEnemies(Graphics pen) {
		for(Enemy enemy : enemies) {
			enemy.draw(pen);
			enemy.move();
		}
	}
	
	private void loadBackgroundImage() {
		try {
			backgroundImage = ImageIO.read(Board.class.getResource("GameBG.jpg"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out.println("Background Image Not Found...");
			System.exit(1);
			e.printStackTrace();
		}
	}
	
	@Override
	public void paintComponent(Graphics pen) {
		
		super.paintComponent(pen); //Clean Up
		
		//all painting logic will be here
		pen.drawImage(backgroundImage, 0, 0, 1400, 800, null);
		
		drawPlayer(pen);
		drawEnemies(pen);
		
	}
}

package com.prateekbisht.gaming;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.Timer;

import com.prateekbisht.gaming.sprites.Enemy;
import com.prateekbisht.gaming.sprites.Player;

public class Board extends JPanel {

    Timer timer;
    BufferedImage backgroundImage;
    BufferedImage buffer;

    Player player;
    Enemy enemies[] = new Enemy[3];
    JButton playAgainButton;

    public Board() {
        setSize(1400, 800);
        loadBackgroundImage();
        player = new Player();
        loadEnemies();
        gameLoop();
        setFocusable(true);
        bindEvents();

        
        buffer = new BufferedImage(1400, 800, BufferedImage.TYPE_INT_ARGB);


        playAgainButton = new JButton("Play Again");
        playAgainButton.setFont(new Font("Arial", Font.BOLD, 20));
        playAgainButton.setBounds(640, 400, 150, 50); 
        playAgainButton.setVisible(false);
        playAgainButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetGame();
            }
        });
        add(playAgainButton);
        setLayout(null);
    }

    private void gameOver(Graphics pen) {
        Font font = new Font("times", Font.BOLD, 50);
        pen.setFont(font);
        FontMetrics metrics = pen.getFontMetrics(font);

        String message = null;

        if (player.outOfScreen()) {
            pen.setColor(Color.RED);
            message = "You Won";
        }

        for (Enemy enemy : enemies) {
            if (isCollide(enemy)) {
                pen.setColor(Color.RED);
                message = "Game Over";
                break;
            }
        }

        if (message != null) {
            int x = (getWidth() - metrics.stringWidth(message)) / 2;
            int y = ((getHeight() - metrics.getHeight()) / 2 + metrics.getAscent())-20;
            pen.drawString(message, x, y);

            timer.stop();
            playAgainButton.setVisible(true);
        }
    }

    private void resetGame() {

        player.resetPosition();
        for (Enemy enemy : enemies) {
            enemy.resetPosition();
        }

        playAgainButton.setVisible(false);
        timer.start();
        repaint();
    }

    private boolean isCollide(Enemy enemy) {

        int paddingX = 15;
        int paddingY = 25;


        Rectangle playerRect = new Rectangle(
            player.getX() + paddingX,
            player.getY() + paddingY,
            player.getW() - 2 * paddingX,
            player.getH() - 2 * paddingY
        );


        Rectangle enemyRect = new Rectangle(
            enemy.getX() + paddingX,
            enemy.getY() + paddingY,
            enemy.getW() - 2 * paddingX,
            enemy.getH() - 2 * paddingY
        );


        return playerRect.intersects(enemyRect);
    }

    private void bindEvents() {
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {}

            @Override
            public void keyReleased(KeyEvent e) {
                player.setSpeed(0);
            }

            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                    player.setSpeed(5);
                } else if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                    player.setSpeed(-5);
                }
            }
        });
    }

    private void loadEnemies() {
        int x = 300;
        int speed = 2;
        for (int i = 0; i < enemies.length; i++) {
            enemies[i] = new Enemy(x + (i * 400), speed + (i * 2));
        }
    }

    private void gameLoop() {
        timer = new Timer(16, (e) -> repaint());
        timer.start();
    }

    private void drawPlayer(Graphics pen) {
        player.draw(pen);
        player.move();
    }

    private void drawEnemies(Graphics pen) {
        for (Enemy enemy : enemies) {
            enemy.draw(pen);
            enemy.move();
        }
    }

    private void loadBackgroundImage() {
        try {
            backgroundImage = ImageIO.read(Board.class.getResource("GameBG.jpg"));
        } catch (IOException e) {
            System.out.println("Background Image Not Found...");
            System.exit(1);
            e.printStackTrace();
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        
        Graphics2D bufferGraphics = buffer.createGraphics();

        
        bufferGraphics.clearRect(0, 0, buffer.getWidth(), buffer.getHeight());


        bufferGraphics.drawImage(backgroundImage, 0, 0, 1400, 800, null);
        drawPlayer(bufferGraphics);
        drawEnemies(bufferGraphics);
        gameOver(bufferGraphics);


        g.drawImage(buffer, 0, 0, null);


        bufferGraphics.dispose();
    }
}
